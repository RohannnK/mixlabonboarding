2025-02-01 22:11:56,439 - INFO - Starting Task 2 Execution with Tree of Thoughts...
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 3), (1, 17)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 3) -> {'current_node': 3, 'path': [(1, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 6), (3, 8), (3, 9), (3, 14)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 3): 0.95
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 6), (3, 8), (3, 9), (3, 14)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 6) -> {'current_node': 6, 'path': [(1, 3), (3, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 3), (3, 6)]}: [(6, 10)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 6): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 6, 'path': [(1, 3), (3, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 3), (3, 6)]}: [(6, 10)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(1, 3), (3, 6)]} with action (6, 10) -> {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Reward for state {'current_node': 6, 'path': [(1, 3), (3, 6)]} and action (6, 10): -0.3
[DEBUG] Checking if state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 8) -> {'current_node': 8, 'path': [(1, 3), (3, 8)]}
[DEBUG] Available actions from state {'current_node': 8, 'path': [(1, 3), (3, 8)]}: [(8, 9), (8, 14)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 8): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 8, 'path': [(1, 3), (3, 8)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 8, 'path': [(1, 3), (3, 8)]}: [(8, 9), (8, 14)]
[DEBUG] Transition: from {'current_node': 8, 'path': [(1, 3), (3, 8)]} with action (8, 9) -> {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]}
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]}: []
[DEBUG] Reward for state {'current_node': 8, 'path': [(1, 3), (3, 8)]} and action (8, 9): -0.3
[DEBUG] Checking if state {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]}: []
[DEBUG] Transition: from {'current_node': 8, 'path': [(1, 3), (3, 8)]} with action (8, 14) -> {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]}
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]}: [(14, 16)]
[DEBUG] Reward for state {'current_node': 8, 'path': [(1, 3), (3, 8)]} and action (8, 14): 1.05
[DEBUG] Checking if state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]}: [(14, 16)]
[DEBUG] Transition: from {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]} with action (14, 16) -> {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]}
[DEBUG] Reward for state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]} and action (14, 16): 1.9
[DEBUG] Checking if state {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]} is terminal: True
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 0 - Candidate state: {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]} with score 1.2
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 3), (1, 17)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 3) -> {'current_node': 3, 'path': [(1, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 6), (3, 8), (3, 9), (3, 14)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 3): 0.95
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 6), (3, 8), (3, 9), (3, 14)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 6) -> {'current_node': 6, 'path': [(1, 3), (3, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 3), (3, 6)]}: [(6, 10)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 6): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 6, 'path': [(1, 3), (3, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 3), (3, 6)]}: [(6, 10)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(1, 3), (3, 6)]} with action (6, 10) -> {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Reward for state {'current_node': 6, 'path': [(1, 3), (3, 6)]} and action (6, 10): -0.3
[DEBUG] Checking if state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 8) -> {'current_node': 8, 'path': [(1, 3), (3, 8)]}
[DEBUG] Available actions from state {'current_node': 8, 'path': [(1, 3), (3, 8)]}: [(8, 9), (8, 14)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 8): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 8, 'path': [(1, 3), (3, 8)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 8, 'path': [(1, 3), (3, 8)]}: [(8, 9), (8, 14)]
[DEBUG] Transition: from {'current_node': 8, 'path': [(1, 3), (3, 8)]} with action (8, 9) -> {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]}
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]}: []
[DEBUG] Reward for state {'current_node': 8, 'path': [(1, 3), (3, 8)]} and action (8, 9): -0.3
[DEBUG] Checking if state {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]}: []
[DEBUG] Transition: from {'current_node': 8, 'path': [(1, 3), (3, 8)]} with action (8, 14) -> {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]}
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]}: [(14, 16)]
[DEBUG] Reward for state {'current_node': 8, 'path': [(1, 3), (3, 8)]} and action (8, 14): 1.05
[DEBUG] Checking if state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]}: [(14, 16)]
[DEBUG] Transition: from {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]} with action (14, 16) -> {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]}
[DEBUG] Reward for state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]} and action (14, 16): 1.9
[DEBUG] Checking if state {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]} is terminal: True
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 1 - Candidate state: {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]} with score 1.2
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 3), (1, 17)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 3) -> {'current_node': 3, 'path': [(1, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 6), (3, 8), (3, 9), (3, 14)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 3): 0.95
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 6), (3, 8), (3, 9), (3, 14)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 6) -> {'current_node': 6, 'path': [(1, 3), (3, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 3), (3, 6)]}: [(6, 10)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 6): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 6, 'path': [(1, 3), (3, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 3), (3, 6)]}: [(6, 10)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(1, 3), (3, 6)]} with action (6, 10) -> {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Reward for state {'current_node': 6, 'path': [(1, 3), (3, 6)]} and action (6, 10): -0.3
[DEBUG] Checking if state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 3), (3, 6), (6, 10)]}: []
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 8) -> {'current_node': 8, 'path': [(1, 3), (3, 8)]}
[DEBUG] Available actions from state {'current_node': 8, 'path': [(1, 3), (3, 8)]}: [(8, 9), (8, 14)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 8): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 8, 'path': [(1, 3), (3, 8)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 8, 'path': [(1, 3), (3, 8)]}: [(8, 9), (8, 14)]
[DEBUG] Transition: from {'current_node': 8, 'path': [(1, 3), (3, 8)]} with action (8, 9) -> {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]}
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]}: []
[DEBUG] Reward for state {'current_node': 8, 'path': [(1, 3), (3, 8)]} and action (8, 9): -0.3
[DEBUG] Checking if state {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 3), (3, 8), (8, 9)]}: []
[DEBUG] Transition: from {'current_node': 8, 'path': [(1, 3), (3, 8)]} with action (8, 14) -> {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]}
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]}: [(14, 16)]
[DEBUG] Reward for state {'current_node': 8, 'path': [(1, 3), (3, 8)]} and action (8, 14): 1.05
[DEBUG] Checking if state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]}: [(14, 16)]
[DEBUG] Transition: from {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]} with action (14, 16) -> {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]}
[DEBUG] Reward for state {'current_node': 14, 'path': [(1, 3), (3, 8), (8, 14)]} and action (14, 16): 1.9
[DEBUG] Checking if state {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]} is terminal: True
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 2 - Candidate state: {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]} with score 1.2
[DEBUG] Best candidate from ensemble: {'current_node': 16, 'path': [(1, 3), (3, 8), (8, 14), (14, 16)]} with score 1.2
2025-02-01 22:11:56,457 - INFO - [DEBUG] Global evaluation score for best candidate: 1.2
2025-02-01 22:11:56,457 - INFO - Item 0: SUCCESS
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 4), (1, 5), (1, 9)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 5)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 5)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 14), (3, 18), (3, 20)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 1.0
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 14), (3, 18), (3, 20)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 9), (5, 11), (5, 17)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 5): 0.85
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 9), (5, 11), (5, 17)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} with action (5, 9) -> {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]}
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]}: [(9, 12)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} and action (5, 9): 0.8999999999999999
[DEBUG] Checking if state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]}: [(9, 12)]
[DEBUG] Transition: from {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]} with action (9, 12) -> {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]}: [(12, 16)]
[DEBUG] Reward for state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]} and action (9, 12): 0.95
[DEBUG] Checking if state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]}: [(12, 16)]
[DEBUG] Transition: from {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]} with action (12, 16) -> {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Reward for state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]} and action (12, 16): -0.3
[DEBUG] Checking if state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,460 - ERROR - Item 1, run 0: No terminal_state in result.
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 4), (1, 5), (1, 9)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 5)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 5)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 14), (3, 18), (3, 20)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 1.0
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 14), (3, 18), (3, 20)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 9), (5, 11), (5, 17)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 5): 0.85
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 9), (5, 11), (5, 17)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} with action (5, 9) -> {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]}
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]}: [(9, 12)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} and action (5, 9): 0.8999999999999999
[DEBUG] Checking if state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]}: [(9, 12)]
[DEBUG] Transition: from {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]} with action (9, 12) -> {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]}: [(12, 16)]
[DEBUG] Reward for state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]} and action (9, 12): 0.95
[DEBUG] Checking if state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]}: [(12, 16)]
[DEBUG] Transition: from {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]} with action (12, 16) -> {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Reward for state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]} and action (12, 16): -0.3
[DEBUG] Checking if state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,464 - ERROR - Item 1, run 1: No terminal_state in result.
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 4), (1, 5), (1, 9)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 5)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 5)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 14), (3, 18), (3, 20)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 1.0
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 14), (3, 18), (3, 20)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 9), (5, 11), (5, 17)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 5): 0.85
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 9), (5, 11), (5, 17)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} with action (5, 9) -> {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]}
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]}: [(9, 12)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} and action (5, 9): 0.8999999999999999
[DEBUG] Checking if state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]}: [(9, 12)]
[DEBUG] Transition: from {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]} with action (9, 12) -> {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]}: [(12, 16)]
[DEBUG] Reward for state {'current_node': 9, 'path': [(1, 2), (2, 3), (3, 5), (5, 9)]} and action (9, 12): 0.95
[DEBUG] Checking if state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]}: [(12, 16)]
[DEBUG] Transition: from {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]} with action (12, 16) -> {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Reward for state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12)]} and action (12, 16): -0.3
[DEBUG] Checking if state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 2), (2, 3), (3, 5), (5, 9), (9, 12), (12, 16)]}: []
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,467 - ERROR - Item 1, run 2: No terminal_state in result.
2025-02-01 22:11:56,467 - INFO - Item 1: FAILURE
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 3), (1, 13)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7), (2, 15)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7), (2, 15)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 6), (3, 10), (3, 19)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 6), (3, 10), (3, 19)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 4) -> {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 5), (4, 12), (4, 14), (4, 17)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 4): 1.05
[DEBUG] Checking if state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 5), (4, 12), (4, 14), (4, 17)]
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} with action (4, 5) -> {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]}: [(5, 6), (5, 12), (5, 21), (5, 22)]
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} and action (4, 5): 1.1
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]}: [(5, 6), (5, 12), (5, 21), (5, 22)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]} with action (5, 6) -> {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]}: [(6, 10), (6, 13), (6, 23)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]} and action (5, 6): 0.95
[DEBUG] Checking if state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]}: [(6, 10), (6, 13), (6, 23)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]} with action (6, 10) -> {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]}: [(10, 18)]
[DEBUG] Reward for state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]} and action (6, 10): 1.0
[DEBUG] Checking if state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]}: [(10, 18)]
[DEBUG] Transition: from {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]} with action (10, 18) -> {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]}
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]}: [(18, 19), (18, 21)]
[DEBUG] Reward for state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]} and action (10, 18): 1.25
[DEBUG] Checking if state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]}: [(18, 19), (18, 21)]
[DEBUG] Transition: from {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} with action (18, 19) -> {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Reward for state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} and action (18, 19): -0.3
[DEBUG] Checking if state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Transition: from {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} with action (18, 21) -> {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Reward for state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} and action (18, 21): -0.3
[DEBUG] Checking if state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,473 - ERROR - Item 2, run 0: No terminal_state in result.
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 3), (1, 13)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7), (2, 15)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7), (2, 15)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 6), (3, 10), (3, 19)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 6), (3, 10), (3, 19)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 4) -> {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 5), (4, 12), (4, 14), (4, 17)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 4): 1.05
[DEBUG] Checking if state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 5), (4, 12), (4, 14), (4, 17)]
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} with action (4, 5) -> {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]}: [(5, 6), (5, 12), (5, 21), (5, 22)]
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} and action (4, 5): 1.1
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]}: [(5, 6), (5, 12), (5, 21), (5, 22)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]} with action (5, 6) -> {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]}: [(6, 10), (6, 13), (6, 23)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]} and action (5, 6): 0.95
[DEBUG] Checking if state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]}: [(6, 10), (6, 13), (6, 23)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]} with action (6, 10) -> {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]}: [(10, 18)]
[DEBUG] Reward for state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]} and action (6, 10): 1.0
[DEBUG] Checking if state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]}: [(10, 18)]
[DEBUG] Transition: from {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]} with action (10, 18) -> {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]}
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]}: [(18, 19), (18, 21)]
[DEBUG] Reward for state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]} and action (10, 18): 1.25
[DEBUG] Checking if state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]}: [(18, 19), (18, 21)]
[DEBUG] Transition: from {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} with action (18, 19) -> {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Reward for state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} and action (18, 19): -0.3
[DEBUG] Checking if state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Transition: from {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} with action (18, 21) -> {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Reward for state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} and action (18, 21): -0.3
[DEBUG] Checking if state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,479 - ERROR - Item 2, run 1: No terminal_state in result.
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 3), (1, 13)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7), (2, 15)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7), (2, 15)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 6), (3, 10), (3, 19)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 6), (3, 10), (3, 19)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 4) -> {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 5), (4, 12), (4, 14), (4, 17)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 4): 1.05
[DEBUG] Checking if state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 5), (4, 12), (4, 14), (4, 17)]
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} with action (4, 5) -> {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]}: [(5, 6), (5, 12), (5, 21), (5, 22)]
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} and action (4, 5): 1.1
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]}: [(5, 6), (5, 12), (5, 21), (5, 22)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]} with action (5, 6) -> {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]}: [(6, 10), (6, 13), (6, 23)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 4), (4, 5)]} and action (5, 6): 0.95
[DEBUG] Checking if state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]}: [(6, 10), (6, 13), (6, 23)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]} with action (6, 10) -> {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]}: [(10, 18)]
[DEBUG] Reward for state {'current_node': 6, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]} and action (6, 10): 1.0
[DEBUG] Checking if state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]}: [(10, 18)]
[DEBUG] Transition: from {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]} with action (10, 18) -> {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]}
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]}: [(18, 19), (18, 21)]
[DEBUG] Reward for state {'current_node': 10, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10)]} and action (10, 18): 1.25
[DEBUG] Checking if state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]}: [(18, 19), (18, 21)]
[DEBUG] Transition: from {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} with action (18, 19) -> {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Reward for state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} and action (18, 19): -0.3
[DEBUG] Checking if state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Transition: from {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} with action (18, 21) -> {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Reward for state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18)]} and action (18, 21): -0.3
[DEBUG] Checking if state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 19)]}: []
[DEBUG] Available actions from state {'current_node': 21, 'path': [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 10), (10, 18), (18, 21)]}: []
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,484 - ERROR - Item 2, run 2: No terminal_state in result.
2025-02-01 22:11:56,484 - INFO - Item 2: FAILURE
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(0, 2), (0, 3), (0, 6)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 2) -> {'current_node': 2, 'path': [(0, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 6), (2, 7), (2, 12)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(0, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 6), (2, 7), (2, 12)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(0, 2)]} with action (2, 6) -> {'current_node': 6, 'path': [(0, 2), (2, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 2), (2, 6)]}: [(6, 8), (6, 12), (6, 23)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(0, 2)]} and action (2, 6): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 6, 'path': [(0, 2), (2, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 2), (2, 6)]}: [(6, 8), (6, 12), (6, 23)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(0, 2), (2, 6)]} with action (6, 8) -> {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]}
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]}: [(8, 10), (8, 17), (8, 22)]
[DEBUG] Reward for state {'current_node': 6, 'path': [(0, 2), (2, 6)]} and action (6, 8): 0.6499999999999999
[DEBUG] Checking if state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]}: [(8, 10), (8, 17), (8, 22)]
[DEBUG] Transition: from {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]} with action (8, 10) -> {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]}: [(10, 12), (10, 17), (10, 22), (10, 23)]
[DEBUG] Reward for state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]} and action (8, 10): 1.1
[DEBUG] Checking if state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]}: [(10, 12), (10, 17), (10, 22), (10, 23)]
[DEBUG] Transition: from {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]} with action (10, 12) -> {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]}: [(12, 13), (12, 15), (12, 22)]
[DEBUG] Reward for state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]} and action (10, 12): 1.15
[DEBUG] Checking if state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]}: [(12, 13), (12, 15), (12, 22)]
[DEBUG] Transition: from {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]} with action (12, 13) -> {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]}
[DEBUG] Available actions from state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]}: [(13, 21), (13, 23)]
[DEBUG] Reward for state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]} and action (12, 13): 1.4
[DEBUG] Checking if state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]}: [(13, 21), (13, 23)]
[DEBUG] Transition: from {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]} with action (13, 21) -> {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]}
[DEBUG] Reward for state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]} and action (13, 21): 2.05
[DEBUG] Checking if state {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]} is terminal: True
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 0 - Candidate state: {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]} with score 1.35
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(0, 2), (0, 3), (0, 6)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 2) -> {'current_node': 2, 'path': [(0, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 6), (2, 7), (2, 12)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(0, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 6), (2, 7), (2, 12)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(0, 2)]} with action (2, 6) -> {'current_node': 6, 'path': [(0, 2), (2, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 2), (2, 6)]}: [(6, 8), (6, 12), (6, 23)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(0, 2)]} and action (2, 6): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 6, 'path': [(0, 2), (2, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 2), (2, 6)]}: [(6, 8), (6, 12), (6, 23)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(0, 2), (2, 6)]} with action (6, 8) -> {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]}
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]}: [(8, 10), (8, 17), (8, 22)]
[DEBUG] Reward for state {'current_node': 6, 'path': [(0, 2), (2, 6)]} and action (6, 8): 0.6499999999999999
[DEBUG] Checking if state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]}: [(8, 10), (8, 17), (8, 22)]
[DEBUG] Transition: from {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]} with action (8, 10) -> {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]}: [(10, 12), (10, 17), (10, 22), (10, 23)]
[DEBUG] Reward for state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]} and action (8, 10): 1.1
[DEBUG] Checking if state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]}: [(10, 12), (10, 17), (10, 22), (10, 23)]
[DEBUG] Transition: from {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]} with action (10, 12) -> {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]}: [(12, 13), (12, 15), (12, 22)]
[DEBUG] Reward for state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]} and action (10, 12): 1.15
[DEBUG] Checking if state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]}: [(12, 13), (12, 15), (12, 22)]
[DEBUG] Transition: from {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]} with action (12, 13) -> {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]}
[DEBUG] Available actions from state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]}: [(13, 21), (13, 23)]
[DEBUG] Reward for state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]} and action (12, 13): 1.4
[DEBUG] Checking if state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]}: [(13, 21), (13, 23)]
[DEBUG] Transition: from {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]} with action (13, 21) -> {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]}
[DEBUG] Reward for state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]} and action (13, 21): 2.05
[DEBUG] Checking if state {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]} is terminal: True
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 1 - Candidate state: {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]} with score 1.35
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(0, 2), (0, 3), (0, 6)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 2) -> {'current_node': 2, 'path': [(0, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 6), (2, 7), (2, 12)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(0, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 6), (2, 7), (2, 12)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(0, 2)]} with action (2, 6) -> {'current_node': 6, 'path': [(0, 2), (2, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 2), (2, 6)]}: [(6, 8), (6, 12), (6, 23)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(0, 2)]} and action (2, 6): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 6, 'path': [(0, 2), (2, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 2), (2, 6)]}: [(6, 8), (6, 12), (6, 23)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(0, 2), (2, 6)]} with action (6, 8) -> {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]}
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]}: [(8, 10), (8, 17), (8, 22)]
[DEBUG] Reward for state {'current_node': 6, 'path': [(0, 2), (2, 6)]} and action (6, 8): 0.6499999999999999
[DEBUG] Checking if state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]}: [(8, 10), (8, 17), (8, 22)]
[DEBUG] Transition: from {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]} with action (8, 10) -> {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]}: [(10, 12), (10, 17), (10, 22), (10, 23)]
[DEBUG] Reward for state {'current_node': 8, 'path': [(0, 2), (2, 6), (6, 8)]} and action (8, 10): 1.1
[DEBUG] Checking if state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]}: [(10, 12), (10, 17), (10, 22), (10, 23)]
[DEBUG] Transition: from {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]} with action (10, 12) -> {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]}: [(12, 13), (12, 15), (12, 22)]
[DEBUG] Reward for state {'current_node': 10, 'path': [(0, 2), (2, 6), (6, 8), (8, 10)]} and action (10, 12): 1.15
[DEBUG] Checking if state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]}: [(12, 13), (12, 15), (12, 22)]
[DEBUG] Transition: from {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]} with action (12, 13) -> {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]}
[DEBUG] Available actions from state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]}: [(13, 21), (13, 23)]
[DEBUG] Reward for state {'current_node': 12, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12)]} and action (12, 13): 1.4
[DEBUG] Checking if state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]}: [(13, 21), (13, 23)]
[DEBUG] Transition: from {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]} with action (13, 21) -> {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]}
[DEBUG] Reward for state {'current_node': 13, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13)]} and action (13, 21): 2.05
[DEBUG] Checking if state {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]} is terminal: True
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 2 - Candidate state: {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]} with score 1.35
[DEBUG] Best candidate from ensemble: {'current_node': 21, 'path': [(0, 2), (2, 6), (6, 8), (8, 10), (10, 12), (12, 13), (13, 21)]} with score 1.35
2025-02-01 22:11:56,497 - INFO - [DEBUG] Global evaluation score for best candidate: 1.35
2025-02-01 22:11:56,497 - INFO - Item 3: SUCCESS
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 11), (1, 13)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 5), (2, 7), (2, 8), (2, 13), (2, 17), (2, 19)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 5), (2, 7), (2, 8), (2, 13), (2, 17), (2, 19)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 9)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 0.6
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 9)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 7)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 5): 1.05
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 7)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} with action (5, 7) -> {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]}
[DEBUG] Available actions from state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]}: [(7, 12), (7, 13), (7, 15), (7, 20)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} and action (5, 7): 1.1
[DEBUG] Checking if state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]}: [(7, 12), (7, 13), (7, 15), (7, 20)]
[DEBUG] Transition: from {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]} with action (7, 12) -> {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]}: [(12, 14)]
[DEBUG] Reward for state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]} and action (7, 12): 1.15
[DEBUG] Checking if state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]}: [(12, 14)]
[DEBUG] Transition: from {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]} with action (12, 14) -> {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]}
[DEBUG] Reward for state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]} and action (12, 14): 2.0
[DEBUG] Checking if state {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]} is terminal: True
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 0 - Candidate state: {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]} with score 1.3
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 11), (1, 13)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 5), (2, 7), (2, 8), (2, 13), (2, 17), (2, 19)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 5), (2, 7), (2, 8), (2, 13), (2, 17), (2, 19)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 9)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 0.6
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 9)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 7)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 5): 1.05
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 7)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} with action (5, 7) -> {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]}
[DEBUG] Available actions from state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]}: [(7, 12), (7, 13), (7, 15), (7, 20)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} and action (5, 7): 1.1
[DEBUG] Checking if state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]}: [(7, 12), (7, 13), (7, 15), (7, 20)]
[DEBUG] Transition: from {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]} with action (7, 12) -> {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]}: [(12, 14)]
[DEBUG] Reward for state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]} and action (7, 12): 1.15
[DEBUG] Checking if state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]}: [(12, 14)]
[DEBUG] Transition: from {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]} with action (12, 14) -> {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]}
[DEBUG] Reward for state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]} and action (12, 14): 2.0
[DEBUG] Checking if state {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]} is terminal: True
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 1 - Candidate state: {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]} with score 1.3
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 11), (1, 13)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 5), (2, 7), (2, 8), (2, 13), (2, 17), (2, 19)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 5), (2, 7), (2, 8), (2, 13), (2, 17), (2, 19)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 9)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 0.6
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 5), (3, 9)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 7)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 5): 1.05
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]}: [(5, 7)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} with action (5, 7) -> {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]}
[DEBUG] Available actions from state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]}: [(7, 12), (7, 13), (7, 15), (7, 20)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 2), (2, 3), (3, 5)]} and action (5, 7): 1.1
[DEBUG] Checking if state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]}: [(7, 12), (7, 13), (7, 15), (7, 20)]
[DEBUG] Transition: from {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]} with action (7, 12) -> {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]}: [(12, 14)]
[DEBUG] Reward for state {'current_node': 7, 'path': [(1, 2), (2, 3), (3, 5), (5, 7)]} and action (7, 12): 1.15
[DEBUG] Checking if state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]}: [(12, 14)]
[DEBUG] Transition: from {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]} with action (12, 14) -> {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]}
[DEBUG] Reward for state {'current_node': 12, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12)]} and action (12, 14): 2.0
[DEBUG] Checking if state {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]} is terminal: True
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 2 - Candidate state: {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]} with score 1.3
[DEBUG] Best candidate from ensemble: {'current_node': 14, 'path': [(1, 2), (2, 3), (3, 5), (5, 7), (7, 12), (12, 14)]} with score 1.3
2025-02-01 22:11:56,508 - INFO - [DEBUG] Global evaluation score for best candidate: 1.3
2025-02-01 22:11:56,508 - INFO - Item 4: SUCCESS
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 3), (1, 4)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 7)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 7)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 4) -> {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 13), (4, 18)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 4): 0.85
[DEBUG] Checking if state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 13), (4, 18)]
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} with action (4, 13) -> {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]}
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]}: [(13, 15), (13, 17)]
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} and action (4, 13): 0.8999999999999999
[DEBUG] Checking if state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]}: [(13, 15), (13, 17)]
[DEBUG] Transition: from {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} with action (13, 15) -> {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Reward for state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} and action (13, 15): -0.3
[DEBUG] Checking if state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Transition: from {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} with action (13, 17) -> {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Reward for state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} and action (13, 17): -0.3
[DEBUG] Checking if state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} with action (4, 18) -> {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}: []
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} and action (4, 18): -0.3
[DEBUG] Checking if state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}: []
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,511 - ERROR - Item 5, run 0: No terminal_state in result.
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 3), (1, 4)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 7)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 7)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 4) -> {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 13), (4, 18)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 4): 0.85
[DEBUG] Checking if state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 13), (4, 18)]
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} with action (4, 13) -> {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]}
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]}: [(13, 15), (13, 17)]
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} and action (4, 13): 0.8999999999999999
[DEBUG] Checking if state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]}: [(13, 15), (13, 17)]
[DEBUG] Transition: from {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} with action (13, 15) -> {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Reward for state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} and action (13, 15): -0.3
[DEBUG] Checking if state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Transition: from {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} with action (13, 17) -> {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Reward for state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} and action (13, 17): -0.3
[DEBUG] Checking if state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} with action (4, 18) -> {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}: []
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} and action (4, 18): -0.3
[DEBUG] Checking if state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}: []
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,513 - ERROR - Item 5, run 1: No terminal_state in result.
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 3), (1, 4)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: [(2, 3), (2, 4), (2, 7)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(1, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(1, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 7)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(1, 2)]} and action (2, 3): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 2), (2, 3)]}: [(3, 4), (3, 7)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 2), (2, 3)]} with action (3, 4) -> {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 13), (4, 18)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 2), (2, 3)]} and action (3, 4): 0.85
[DEBUG] Checking if state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]}: [(4, 13), (4, 18)]
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} with action (4, 13) -> {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]}
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]}: [(13, 15), (13, 17)]
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} and action (4, 13): 0.8999999999999999
[DEBUG] Checking if state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]}: [(13, 15), (13, 17)]
[DEBUG] Transition: from {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} with action (13, 15) -> {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Reward for state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} and action (13, 15): -0.3
[DEBUG] Checking if state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Transition: from {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} with action (13, 17) -> {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Reward for state {'current_node': 13, 'path': [(1, 2), (2, 3), (3, 4), (4, 13)]} and action (13, 17): -0.3
[DEBUG] Checking if state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} with action (4, 18) -> {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}: []
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 2), (2, 3), (3, 4)]} and action (4, 18): -0.3
[DEBUG] Checking if state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 15)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(1, 2), (2, 3), (3, 4), (4, 13), (13, 17)]}: []
[DEBUG] Available actions from state {'current_node': 18, 'path': [(1, 2), (2, 3), (3, 4), (4, 18)]}: []
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,516 - ERROR - Item 5, run 2: No terminal_state in result.
2025-02-01 22:11:56,516 - INFO - Item 5: FAILURE
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(0, 2), (0, 6), (0, 8), (0, 10)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 2) -> {'current_node': 2, 'path': [(0, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: []
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 2): -0.3
[DEBUG] Checking if state {'current_node': 2, 'path': [(0, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: []
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 6) -> {'current_node': 6, 'path': [(0, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 6)]}: [(6, 8), (6, 10)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 6): 0.75
[DEBUG] Checking if state {'current_node': 6, 'path': [(0, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 6)]}: [(6, 8), (6, 10)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(0, 6)]} with action (6, 8) -> {'current_node': 8, 'path': [(0, 6), (6, 8)]}
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 6), (6, 8)]}: [(8, 10), (8, 11)]
[DEBUG] Reward for state {'current_node': 6, 'path': [(0, 6)]} and action (6, 8): 1.0
[DEBUG] Checking if state {'current_node': 8, 'path': [(0, 6), (6, 8)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 6), (6, 8)]}: [(8, 10), (8, 11)]
[DEBUG] Transition: from {'current_node': 8, 'path': [(0, 6), (6, 8)]} with action (8, 10) -> {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]}: []
[DEBUG] Reward for state {'current_node': 8, 'path': [(0, 6), (6, 8)]} and action (8, 10): -0.3
[DEBUG] Checking if state {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]}: []
[DEBUG] Transition: from {'current_node': 8, 'path': [(0, 6), (6, 8)]} with action (8, 11) -> {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]}
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]}: [(11, 13), (11, 19)]
[DEBUG] Reward for state {'current_node': 8, 'path': [(0, 6), (6, 8)]} and action (8, 11): 1.05
[DEBUG] Checking if state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]}: [(11, 13), (11, 19)]
[DEBUG] Transition: from {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]} with action (11, 13) -> {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]}
[DEBUG] Reward for state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]} and action (11, 13): 1.9
[DEBUG] Checking if state {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]} is terminal: True
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 0 - Candidate state: {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]} with score 1.2
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(0, 2), (0, 6), (0, 8), (0, 10)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 2) -> {'current_node': 2, 'path': [(0, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: []
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 2): -0.3
[DEBUG] Checking if state {'current_node': 2, 'path': [(0, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: []
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 6) -> {'current_node': 6, 'path': [(0, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 6)]}: [(6, 8), (6, 10)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 6): 0.75
[DEBUG] Checking if state {'current_node': 6, 'path': [(0, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 6)]}: [(6, 8), (6, 10)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(0, 6)]} with action (6, 8) -> {'current_node': 8, 'path': [(0, 6), (6, 8)]}
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 6), (6, 8)]}: [(8, 10), (8, 11)]
[DEBUG] Reward for state {'current_node': 6, 'path': [(0, 6)]} and action (6, 8): 1.0
[DEBUG] Checking if state {'current_node': 8, 'path': [(0, 6), (6, 8)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 6), (6, 8)]}: [(8, 10), (8, 11)]
[DEBUG] Transition: from {'current_node': 8, 'path': [(0, 6), (6, 8)]} with action (8, 10) -> {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]}: []
[DEBUG] Reward for state {'current_node': 8, 'path': [(0, 6), (6, 8)]} and action (8, 10): -0.3
[DEBUG] Checking if state {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]}: []
[DEBUG] Transition: from {'current_node': 8, 'path': [(0, 6), (6, 8)]} with action (8, 11) -> {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]}
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]}: [(11, 13), (11, 19)]
[DEBUG] Reward for state {'current_node': 8, 'path': [(0, 6), (6, 8)]} and action (8, 11): 1.05
[DEBUG] Checking if state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]}: [(11, 13), (11, 19)]
[DEBUG] Transition: from {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]} with action (11, 13) -> {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]}
[DEBUG] Reward for state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]} and action (11, 13): 1.9
[DEBUG] Checking if state {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]} is terminal: True
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 1 - Candidate state: {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]} with score 1.2
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(0, 2), (0, 6), (0, 8), (0, 10)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 2) -> {'current_node': 2, 'path': [(0, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: []
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 2): -0.3
[DEBUG] Checking if state {'current_node': 2, 'path': [(0, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: []
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 6) -> {'current_node': 6, 'path': [(0, 6)]}
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 6)]}: [(6, 8), (6, 10)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 6): 0.75
[DEBUG] Checking if state {'current_node': 6, 'path': [(0, 6)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 6, 'path': [(0, 6)]}: [(6, 8), (6, 10)]
[DEBUG] Transition: from {'current_node': 6, 'path': [(0, 6)]} with action (6, 8) -> {'current_node': 8, 'path': [(0, 6), (6, 8)]}
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 6), (6, 8)]}: [(8, 10), (8, 11)]
[DEBUG] Reward for state {'current_node': 6, 'path': [(0, 6)]} and action (6, 8): 1.0
[DEBUG] Checking if state {'current_node': 8, 'path': [(0, 6), (6, 8)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 8, 'path': [(0, 6), (6, 8)]}: [(8, 10), (8, 11)]
[DEBUG] Transition: from {'current_node': 8, 'path': [(0, 6), (6, 8)]} with action (8, 10) -> {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]}
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]}: []
[DEBUG] Reward for state {'current_node': 8, 'path': [(0, 6), (6, 8)]} and action (8, 10): -0.3
[DEBUG] Checking if state {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 10, 'path': [(0, 6), (6, 8), (8, 10)]}: []
[DEBUG] Transition: from {'current_node': 8, 'path': [(0, 6), (6, 8)]} with action (8, 11) -> {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]}
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]}: [(11, 13), (11, 19)]
[DEBUG] Reward for state {'current_node': 8, 'path': [(0, 6), (6, 8)]} and action (8, 11): 1.05
[DEBUG] Checking if state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]}: [(11, 13), (11, 19)]
[DEBUG] Transition: from {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]} with action (11, 13) -> {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]}
[DEBUG] Reward for state {'current_node': 11, 'path': [(0, 6), (6, 8), (8, 11)]} and action (11, 13): 1.9
[DEBUG] Checking if state {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]} is terminal: True
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 2 - Candidate state: {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]} with score 1.2
[DEBUG] Best candidate from ensemble: {'current_node': 13, 'path': [(0, 6), (6, 8), (8, 11), (11, 13)]} with score 1.2
2025-02-01 22:11:56,523 - INFO - [DEBUG] Global evaluation score for best candidate: 1.2
2025-02-01 22:11:56,523 - INFO - Item 6: SUCCESS
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 3), (1, 4), (1, 5), (1, 13)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: []
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): -0.3
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: []
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 3) -> {'current_node': 3, 'path': [(1, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 4), (3, 5), (3, 6), (3, 13), (3, 17), (3, 22)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 3): 0.75
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 4), (3, 5), (3, 6), (3, 13), (3, 17), (3, 22)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 4) -> {'current_node': 4, 'path': [(1, 3), (3, 4)]}
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 3), (3, 4)]}: [(4, 11)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 4): 0.6
[DEBUG] Checking if state {'current_node': 4, 'path': [(1, 3), (3, 4)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 3), (3, 4)]}: [(4, 11)]
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 3), (3, 4)]} with action (4, 11) -> {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]}
[DEBUG] Available actions from state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]}: [(11, 13)]
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 3), (3, 4)]} and action (4, 11): 1.05
[DEBUG] Checking if state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]}: [(11, 13)]
[DEBUG] Transition: from {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]} with action (11, 13) -> {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]}
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]}: [(13, 16)]
[DEBUG] Reward for state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]} and action (11, 13): 1.1
[DEBUG] Checking if state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]}: [(13, 16)]
[DEBUG] Transition: from {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]} with action (13, 16) -> {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]}
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]}: [(16, 20)]
[DEBUG] Reward for state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]} and action (13, 16): 1.15
[DEBUG] Checking if state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]}: [(16, 20)]
[DEBUG] Transition: from {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]} with action (16, 20) -> {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]}
[DEBUG] Reward for state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]} and action (16, 20): 2.0
[DEBUG] Checking if state {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]} is terminal: True
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 0 - Candidate state: {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]} with score 1.3
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 3), (1, 4), (1, 5), (1, 13)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: []
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): -0.3
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: []
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 3) -> {'current_node': 3, 'path': [(1, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 4), (3, 5), (3, 6), (3, 13), (3, 17), (3, 22)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 3): 0.75
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 4), (3, 5), (3, 6), (3, 13), (3, 17), (3, 22)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 4) -> {'current_node': 4, 'path': [(1, 3), (3, 4)]}
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 3), (3, 4)]}: [(4, 11)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 4): 0.6
[DEBUG] Checking if state {'current_node': 4, 'path': [(1, 3), (3, 4)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 3), (3, 4)]}: [(4, 11)]
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 3), (3, 4)]} with action (4, 11) -> {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]}
[DEBUG] Available actions from state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]}: [(11, 13)]
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 3), (3, 4)]} and action (4, 11): 1.05
[DEBUG] Checking if state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]}: [(11, 13)]
[DEBUG] Transition: from {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]} with action (11, 13) -> {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]}
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]}: [(13, 16)]
[DEBUG] Reward for state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]} and action (11, 13): 1.1
[DEBUG] Checking if state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]}: [(13, 16)]
[DEBUG] Transition: from {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]} with action (13, 16) -> {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]}
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]}: [(16, 20)]
[DEBUG] Reward for state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]} and action (13, 16): 1.15
[DEBUG] Checking if state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]}: [(16, 20)]
[DEBUG] Transition: from {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]} with action (16, 20) -> {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]}
[DEBUG] Reward for state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]} and action (16, 20): 2.0
[DEBUG] Checking if state {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]} is terminal: True
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 1 - Candidate state: {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]} with score 1.3
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 2), (1, 3), (1, 4), (1, 5), (1, 13)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 2) -> {'current_node': 2, 'path': [(1, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: []
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 2): -0.3
[DEBUG] Checking if state {'current_node': 2, 'path': [(1, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(1, 2)]}: []
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 3) -> {'current_node': 3, 'path': [(1, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 4), (3, 5), (3, 6), (3, 13), (3, 17), (3, 22)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 3): 0.75
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 4), (3, 5), (3, 6), (3, 13), (3, 17), (3, 22)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 4) -> {'current_node': 4, 'path': [(1, 3), (3, 4)]}
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 3), (3, 4)]}: [(4, 11)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 4): 0.6
[DEBUG] Checking if state {'current_node': 4, 'path': [(1, 3), (3, 4)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 4, 'path': [(1, 3), (3, 4)]}: [(4, 11)]
[DEBUG] Transition: from {'current_node': 4, 'path': [(1, 3), (3, 4)]} with action (4, 11) -> {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]}
[DEBUG] Available actions from state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]}: [(11, 13)]
[DEBUG] Reward for state {'current_node': 4, 'path': [(1, 3), (3, 4)]} and action (4, 11): 1.05
[DEBUG] Checking if state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]}: [(11, 13)]
[DEBUG] Transition: from {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]} with action (11, 13) -> {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]}
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]}: [(13, 16)]
[DEBUG] Reward for state {'current_node': 11, 'path': [(1, 3), (3, 4), (4, 11)]} and action (11, 13): 1.1
[DEBUG] Checking if state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]}: [(13, 16)]
[DEBUG] Transition: from {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]} with action (13, 16) -> {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]}
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]}: [(16, 20)]
[DEBUG] Reward for state {'current_node': 13, 'path': [(1, 3), (3, 4), (4, 11), (11, 13)]} and action (13, 16): 1.15
[DEBUG] Checking if state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]}: [(16, 20)]
[DEBUG] Transition: from {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]} with action (16, 20) -> {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]}
[DEBUG] Reward for state {'current_node': 16, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16)]} and action (16, 20): 2.0
[DEBUG] Checking if state {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]} is terminal: True
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 2 - Candidate state: {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]} with score 1.3
[DEBUG] Best candidate from ensemble: {'current_node': 20, 'path': [(1, 3), (3, 4), (4, 11), (11, 13), (13, 16), (16, 20)]} with score 1.3
2025-02-01 22:11:56,533 - INFO - [DEBUG] Global evaluation score for best candidate: 1.3
2025-02-01 22:11:56,533 - INFO - Item 7: SUCCESS
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(0, 2), (0, 3), (0, 5)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 2) -> {'current_node': 2, 'path': [(0, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 3), (2, 6), (2, 9)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(0, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 3), (2, 6), (2, 9)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(0, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(0, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(0, 2), (2, 3)]}: [(3, 5), (3, 9), (3, 11)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(0, 2)]} and action (2, 3): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 3, 'path': [(0, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(0, 2), (2, 3)]}: [(3, 5), (3, 9), (3, 11)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(0, 2), (2, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]}: []
[DEBUG] Reward for state {'current_node': 3, 'path': [(0, 2), (2, 3)]} and action (3, 5): -0.3
[DEBUG] Checking if state {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]}: []
[DEBUG] Transition: from {'current_node': 3, 'path': [(0, 2), (2, 3)]} with action (3, 9) -> {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]}
[DEBUG] Available actions from state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]}: [(9, 17)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(0, 2), (2, 3)]} and action (3, 9): 0.85
[DEBUG] Checking if state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]}: [(9, 17)]
[DEBUG] Transition: from {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]} with action (9, 17) -> {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Reward for state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]} and action (9, 17): -0.3
[DEBUG] Checking if state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Transition: from {'current_node': 3, 'path': [(0, 2), (2, 3)]} with action (3, 11) -> {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]}
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]}: [(11, 12), (11, 16)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(0, 2), (2, 3)]} and action (3, 11): 0.85
[DEBUG] Checking if state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]}: [(11, 12), (11, 16)]
[DEBUG] Transition: from {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} with action (11, 12) -> {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}: []
[DEBUG] Reward for state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} and action (11, 12): -0.3
[DEBUG] Checking if state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}: []
[DEBUG] Transition: from {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} with action (11, 16) -> {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}
[DEBUG] Available actions from state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}: []
[DEBUG] Reward for state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} and action (11, 16): -0.3
[DEBUG] Checking if state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}: []
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,535 - ERROR - Item 8, run 0: No terminal_state in result.
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(0, 2), (0, 3), (0, 5)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 2) -> {'current_node': 2, 'path': [(0, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 3), (2, 6), (2, 9)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(0, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 3), (2, 6), (2, 9)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(0, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(0, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(0, 2), (2, 3)]}: [(3, 5), (3, 9), (3, 11)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(0, 2)]} and action (2, 3): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 3, 'path': [(0, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(0, 2), (2, 3)]}: [(3, 5), (3, 9), (3, 11)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(0, 2), (2, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]}: []
[DEBUG] Reward for state {'current_node': 3, 'path': [(0, 2), (2, 3)]} and action (3, 5): -0.3
[DEBUG] Checking if state {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]}: []
[DEBUG] Transition: from {'current_node': 3, 'path': [(0, 2), (2, 3)]} with action (3, 9) -> {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]}
[DEBUG] Available actions from state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]}: [(9, 17)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(0, 2), (2, 3)]} and action (3, 9): 0.85
[DEBUG] Checking if state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]}: [(9, 17)]
[DEBUG] Transition: from {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]} with action (9, 17) -> {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Reward for state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]} and action (9, 17): -0.3
[DEBUG] Checking if state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Transition: from {'current_node': 3, 'path': [(0, 2), (2, 3)]} with action (3, 11) -> {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]}
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]}: [(11, 12), (11, 16)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(0, 2), (2, 3)]} and action (3, 11): 0.85
[DEBUG] Checking if state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]}: [(11, 12), (11, 16)]
[DEBUG] Transition: from {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} with action (11, 12) -> {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}: []
[DEBUG] Reward for state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} and action (11, 12): -0.3
[DEBUG] Checking if state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}: []
[DEBUG] Transition: from {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} with action (11, 16) -> {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}
[DEBUG] Available actions from state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}: []
[DEBUG] Reward for state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} and action (11, 16): -0.3
[DEBUG] Checking if state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}: []
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,538 - ERROR - Item 8, run 1: No terminal_state in result.
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(0, 2), (0, 3), (0, 5)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (0, 2) -> {'current_node': 2, 'path': [(0, 2)]}
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 3), (2, 6), (2, 9)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (0, 2): 0.95
[DEBUG] Checking if state {'current_node': 2, 'path': [(0, 2)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 2, 'path': [(0, 2)]}: [(2, 3), (2, 6), (2, 9)]
[DEBUG] Transition: from {'current_node': 2, 'path': [(0, 2)]} with action (2, 3) -> {'current_node': 3, 'path': [(0, 2), (2, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(0, 2), (2, 3)]}: [(3, 5), (3, 9), (3, 11)]
[DEBUG] Reward for state {'current_node': 2, 'path': [(0, 2)]} and action (2, 3): 0.7999999999999999
[DEBUG] Checking if state {'current_node': 3, 'path': [(0, 2), (2, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(0, 2), (2, 3)]}: [(3, 5), (3, 9), (3, 11)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(0, 2), (2, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]}: []
[DEBUG] Reward for state {'current_node': 3, 'path': [(0, 2), (2, 3)]} and action (3, 5): -0.3
[DEBUG] Checking if state {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(0, 2), (2, 3), (3, 5)]}: []
[DEBUG] Transition: from {'current_node': 3, 'path': [(0, 2), (2, 3)]} with action (3, 9) -> {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]}
[DEBUG] Available actions from state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]}: [(9, 17)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(0, 2), (2, 3)]} and action (3, 9): 0.85
[DEBUG] Checking if state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]}: [(9, 17)]
[DEBUG] Transition: from {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]} with action (9, 17) -> {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Reward for state {'current_node': 9, 'path': [(0, 2), (2, 3), (3, 9)]} and action (9, 17): -0.3
[DEBUG] Checking if state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Transition: from {'current_node': 3, 'path': [(0, 2), (2, 3)]} with action (3, 11) -> {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]}
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]}: [(11, 12), (11, 16)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(0, 2), (2, 3)]} and action (3, 11): 0.85
[DEBUG] Checking if state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]}: [(11, 12), (11, 16)]
[DEBUG] Transition: from {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} with action (11, 12) -> {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}: []
[DEBUG] Reward for state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} and action (11, 12): -0.3
[DEBUG] Checking if state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}: []
[DEBUG] Transition: from {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} with action (11, 16) -> {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}
[DEBUG] Available actions from state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}: []
[DEBUG] Reward for state {'current_node': 11, 'path': [(0, 2), (2, 3), (3, 11)]} and action (11, 16): -0.3
[DEBUG] Checking if state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}: []
[DEBUG] Available actions from state {'current_node': 12, 'path': [(0, 2), (2, 3), (3, 11), (11, 12)]}: []
[DEBUG] Available actions from state {'current_node': 16, 'path': [(0, 2), (2, 3), (3, 11), (11, 16)]}: []
[DEBUG] Available actions from state {'current_node': 17, 'path': [(0, 2), (2, 3), (3, 9), (9, 17)]}: []
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
2025-02-01 22:11:56,540 - ERROR - Item 8, run 2: No terminal_state in result.
2025-02-01 22:11:56,540 - INFO - Item 8: FAILURE
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 3), (1, 18), (1, 24)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 3) -> {'current_node': 3, 'path': [(1, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 5), (3, 7), (3, 8)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 3): 0.95
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 5), (3, 7), (3, 8)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(1, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 3), (3, 5)]}: [(5, 14), (5, 15), (5, 19)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 5): 1.0
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 3), (3, 5)]}: [(5, 14), (5, 15), (5, 19)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 3), (3, 5)]} with action (5, 14) -> {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]}
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]}: []
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 3), (3, 5)]} and action (5, 14): -0.3
[DEBUG] Checking if state {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]}: []
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 3), (3, 5)]} with action (5, 15) -> {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]}
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]}: [(15, 19), (15, 22), (15, 24)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 3), (3, 5)]} and action (5, 15): 1.05
[DEBUG] Checking if state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]}: [(15, 19), (15, 22), (15, 24)]
[DEBUG] Transition: from {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]} with action (15, 19) -> {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]}
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]}: [(19, 22), (19, 24)]
[DEBUG] Reward for state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]} and action (15, 19): 0.8999999999999999
[DEBUG] Checking if state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]}: [(19, 22), (19, 24)]
[DEBUG] Transition: from {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]} with action (19, 22) -> {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]}
[DEBUG] Reward for state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]} and action (19, 22): 1.95
[DEBUG] Checking if state {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]} is terminal: True
[DEBUG] Run 0 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 0 - Candidate state: {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]} with score 1.25
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 3), (1, 18), (1, 24)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 3) -> {'current_node': 3, 'path': [(1, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 5), (3, 7), (3, 8)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 3): 0.95
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 5), (3, 7), (3, 8)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(1, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 3), (3, 5)]}: [(5, 14), (5, 15), (5, 19)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 5): 1.0
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 3), (3, 5)]}: [(5, 14), (5, 15), (5, 19)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 3), (3, 5)]} with action (5, 14) -> {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]}
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]}: []
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 3), (3, 5)]} and action (5, 14): -0.3
[DEBUG] Checking if state {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]}: []
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 3), (3, 5)]} with action (5, 15) -> {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]}
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]}: [(15, 19), (15, 22), (15, 24)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 3), (3, 5)]} and action (5, 15): 1.05
[DEBUG] Checking if state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]}: [(15, 19), (15, 22), (15, 24)]
[DEBUG] Transition: from {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]} with action (15, 19) -> {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]}
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]}: [(19, 22), (19, 24)]
[DEBUG] Reward for state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]} and action (15, 19): 0.8999999999999999
[DEBUG] Checking if state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]}: [(19, 22), (19, 24)]
[DEBUG] Transition: from {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]} with action (19, 22) -> {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]}
[DEBUG] Reward for state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]} and action (19, 22): 1.95
[DEBUG] Checking if state {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]} is terminal: True
[DEBUG] Run 1 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 1 - Candidate state: {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]} with score 1.25
[DEBUG] MCTS attributes: ['__abstractmethods__', '__call__', '__class__', '__class_getitem__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__orig_bases__', '__parameters__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_back_propagate', '_dfs_max_reward', '_expand', '_is_terminal_with_depth_limit', '_output_cum_reward', '_output_iter', '_select', '_simulate', '_uct', '_uct_select', 'aggregator', 'calc_q', 'cum_reward', 'depth_limit', 'disable_tqdm', 'iterate', 'n_iters', 'node_visualizer', 'output_strategy', 'output_trace_in_each_iter', 'root', 'search', 'search_config', 'simulate_choice', 'trace_in_each_iter', 'uct_with_fast_reward', 'w_exp', 'world_model']
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Initializing state: {'current_node': None, 'path': []}
[DEBUG] Available actions from state {'current_node': None, 'path': []}: [(1, 3), (1, 18), (1, 24)]
[DEBUG] Transition: from {'current_node': None, 'path': []} with action (1, 3) -> {'current_node': 3, 'path': [(1, 3)]}
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 5), (3, 7), (3, 8)]
[DEBUG] Reward for state {'current_node': None, 'path': []} and action (1, 3): 0.95
[DEBUG] Checking if state {'current_node': 3, 'path': [(1, 3)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 3, 'path': [(1, 3)]}: [(3, 5), (3, 7), (3, 8)]
[DEBUG] Transition: from {'current_node': 3, 'path': [(1, 3)]} with action (3, 5) -> {'current_node': 5, 'path': [(1, 3), (3, 5)]}
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 3), (3, 5)]}: [(5, 14), (5, 15), (5, 19)]
[DEBUG] Reward for state {'current_node': 3, 'path': [(1, 3)]} and action (3, 5): 1.0
[DEBUG] Checking if state {'current_node': 5, 'path': [(1, 3), (3, 5)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 5, 'path': [(1, 3), (3, 5)]}: [(5, 14), (5, 15), (5, 19)]
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 3), (3, 5)]} with action (5, 14) -> {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]}
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]}: []
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 3), (3, 5)]} and action (5, 14): -0.3
[DEBUG] Checking if state {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 14, 'path': [(1, 3), (3, 5), (5, 14)]}: []
[DEBUG] Transition: from {'current_node': 5, 'path': [(1, 3), (3, 5)]} with action (5, 15) -> {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]}
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]}: [(15, 19), (15, 22), (15, 24)]
[DEBUG] Reward for state {'current_node': 5, 'path': [(1, 3), (3, 5)]} and action (5, 15): 1.05
[DEBUG] Checking if state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]}: [(15, 19), (15, 22), (15, 24)]
[DEBUG] Transition: from {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]} with action (15, 19) -> {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]}
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]}: [(19, 22), (19, 24)]
[DEBUG] Reward for state {'current_node': 15, 'path': [(1, 3), (3, 5), (5, 15)]} and action (15, 19): 0.8999999999999999
[DEBUG] Checking if state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]} is terminal: False
[DEBUG] Available actions from state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]}: [(19, 22), (19, 24)]
[DEBUG] Transition: from {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]} with action (19, 22) -> {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]}
[DEBUG] Reward for state {'current_node': 19, 'path': [(1, 3), (3, 5), (5, 15), (15, 19)]} and action (19, 22): 1.95
[DEBUG] Checking if state {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]} is terminal: True
[DEBUG] Run 2 - Search result attributes: ['__add__', '__annotations__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__match_args__', '__module__', '__mul__', '__ne__', '__new__', '__orig_bases__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '_asdict', '_field_defaults', '_fields', '_make', '_replace', 'aggregated_result', 'count', 'cum_reward', 'index', 'terminal_state', 'trace', 'trace_in_each_iter', 'trace_of_nodes', 'tree_state', 'tree_state_after_each_iter']
[DEBUG] Run 2 - Candidate state: {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]} with score 1.25
[DEBUG] Best candidate from ensemble: {'current_node': 22, 'path': [(1, 3), (3, 5), (5, 15), (15, 19), (19, 22)]} with score 1.25
2025-02-01 22:11:56,549 - INFO - [DEBUG] Global evaluation score for best candidate: 1.25
2025-02-01 22:11:56,549 - INFO - Item 9: SUCCESS
2025-02-01 22:11:56,549 - INFO - [INFO] Visualizing candidate with score: 1.35
[DEBUG] Saved search tree visualization to results/search_tree_visualization.json
2025-02-01 22:11:56,549 - INFO - FINAL ACCURACY: 60.0%
Final accuracy: 60.0%
